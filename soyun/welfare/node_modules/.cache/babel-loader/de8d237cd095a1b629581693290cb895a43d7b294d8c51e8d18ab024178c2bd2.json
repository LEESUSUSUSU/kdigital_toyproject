{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPopup = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [loginState, setLoginState] = useRecoilState(LoginAtoms);\n  const [userInfo, setUserInfo] = useRecoilState(UserInfoAtoms);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      //로그인이 완료되면 할 작업\n\n      if (response.ok) {\n        setMessage(`Hello, ${username} 어서오세요!`);\n        setLoginState(1);\n        setUserInfo(username);\n        closeModal();\n      } else {\n        setMessage('로그인 실패. 올바른 정보를 입력하세요.');\n      }\n    } catch (error) {\n      setMessage('로그인 실패. 서버 오류가 발생했습니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(LoginPopup, \"Dw7jQWg4fCvLQC8yz1RClZblg4I=\", true);\n_c = LoginPopup;\nexport default LoginPopup;\nvar _c;\n$RefreshReg$(_c, \"LoginPopup\");","map":{"version":3,"names":["LoginPopup","_s","username","setUsername","useState","password","setPassword","message","setMessage","loginState","setLoginState","useRecoilState","LoginAtoms","userInfo","setUserInfo","UserInfoAtoms","handleLogin","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","closeModal","error","_jsxDEV","_Fragment","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/kdigital_toyproject/kdigital_toyproject/soyun/welfare/src/components/LoginPopup.js"],"sourcesContent":["const LoginPopup = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [loginState, setLoginState] = useRecoilState(LoginAtoms);\r\n    const [userInfo, setUserInfo] = useRecoilState(UserInfoAtoms);\r\n  \r\n    const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n  \r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/login', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            username,\r\n            password,\r\n          }),\r\n        });\r\n  \r\n  \r\n  \r\n        //로그인이 완료되면 할 작업\r\n  \r\n        if (response.ok) {\r\n          setMessage(`Hello, ${username} 어서오세요!`);\r\n          setLoginState(1);\r\n          setUserInfo(username);\r\n          closeModal();\r\n        } else {\r\n          setMessage('로그인 실패. 올바른 정보를 입력하세요.');\r\n        }\r\n      } catch (error) {\r\n        setMessage('로그인 실패. 서버 오류가 발생했습니다.');\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginPopup;"],"mappings":";;;AAAA,MAAMA,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGC,cAAc,CAACC,UAAU,CAAC;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGH,cAAc,CAACI,aAAa,CAAC;EAE7D,MAAMC,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBvB,QAAQ;UACRG;QACF,CAAC;MACH,CAAC,CAAC;;MAIF;;MAEA,IAAIc,QAAQ,CAACO,EAAE,EAAE;QACflB,UAAU,CAAE,UAASN,QAAS,SAAQ,CAAC;QACvCQ,aAAa,CAAC,CAAC,CAAC;QAChBI,WAAW,CAACZ,QAAQ,CAAC;QACrByB,UAAU,CAAC,CAAC;MACd,CAAC,MAAM;QACLnB,UAAU,CAAC,wBAAwB,CAAC;MACtC;IACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdpB,UAAU,CAAC,wBAAwB,CAAC;IACtC;EACF,CAAC;EAKD,oBACIqB,OAAA,CAAAC,SAAA,mBACE,CAAC;AAEX,CAAC;AAAA7B,EAAA,CA/CKD,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAiDhB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}