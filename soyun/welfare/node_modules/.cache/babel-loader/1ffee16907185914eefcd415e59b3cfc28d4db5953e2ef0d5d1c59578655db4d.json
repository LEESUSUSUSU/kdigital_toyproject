{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { LoginAtoms } from './Atoms/LoginAtoms';\nimport { UserInfoAtoms } from './Atoms/UserInfoAtoms';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPopup = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [loginState, setLoginState] = useRecoilState(LoginAtoms);\n  const [userInfo, setUserInfo] = useRecoilState(UserInfoAtoms);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      //로그인이 완료되면 할 작업\n\n      if (response.ok) {\n        setMessage(`Hello, ${username} 어서오세요!`);\n        setLoginState(1);\n        setUserInfo(username);\n        closeModal();\n      } else {\n        setMessage('로그인 실패. 올바른 정보를 입력하세요.');\n      }\n    } catch (error) {\n      setMessage('로그인 실패. 서버 오류가 발생했습니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(LoginPopup, \"Dw7jQWg4fCvLQC8yz1RClZblg4I=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n_c = LoginPopup;\nexport default LoginPopup;\nvar _c;\n$RefreshReg$(_c, \"LoginPopup\");","map":{"version":3,"names":["React","useState","axios","useRecoilState","useRecoilValue","LoginAtoms","UserInfoAtoms","Fragment","_Fragment","jsxDEV","_jsxDEV","LoginPopup","_s","username","setUsername","password","setPassword","message","setMessage","loginState","setLoginState","userInfo","setUserInfo","handleLogin","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","closeModal","error","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/kdigital_toyproject/kdigital_toyproject/soyun/welfare/src/components/LoginPopup.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport {LoginAtoms} from './Atoms/LoginAtoms';\r\nimport {UserInfoAtoms} from './Atoms/UserInfoAtoms';\r\n\r\n\r\nconst LoginPopup = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [loginState, setLoginState] = useRecoilState(LoginAtoms);\r\n    const [userInfo, setUserInfo] = useRecoilState(UserInfoAtoms);\r\n  \r\n    const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n  \r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/login', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            username,\r\n            password,\r\n          }),\r\n        });\r\n  \r\n  \r\n  \r\n        //로그인이 완료되면 할 작업\r\n  \r\n        if (response.ok) {\r\n          setMessage(`Hello, ${username} 어서오세요!`);\r\n          setLoginState(1);\r\n          setUserInfo(username);\r\n          closeModal();\r\n        } else {\r\n          setMessage('로그인 실패. 올바른 정보를 입력하세요.');\r\n        }\r\n      } catch (error) {\r\n        setMessage('로그인 실패. 서버 오류가 발생했습니다.');\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginPopup;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,cAAc,EAAEC,cAAc,QAAO,QAAQ;AACrD,SAAQC,UAAU,QAAO,oBAAoB;AAC7C,SAAQC,aAAa,QAAO,uBAAuB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGpD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,cAAc,CAACE,UAAU,CAAC;EAC9D,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,cAAc,CAACG,aAAa,CAAC;EAE7D,MAAMiB,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBnB,QAAQ;UACRE;QACF,CAAC;MACH,CAAC,CAAC;;MAIF;;MAEA,IAAIW,QAAQ,CAACO,EAAE,EAAE;QACff,UAAU,CAAE,UAASL,QAAS,SAAQ,CAAC;QACvCO,aAAa,CAAC,CAAC,CAAC;QAChBE,WAAW,CAACT,QAAQ,CAAC;QACrBqB,UAAU,CAAC,CAAC;MACd,CAAC,MAAM;QACLhB,UAAU,CAAC,wBAAwB,CAAC;MACtC;IACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdjB,UAAU,CAAC,wBAAwB,CAAC;IACtC;EACF,CAAC;EAKD,oBACIR,OAAA,CAAAF,SAAA,mBACE,CAAC;AAEX,CAAC;AAAAI,EAAA,CA/CKD,UAAU;EAAA,QAKwBR,cAAc,EAClBA,cAAc;AAAA;AAAAiC,EAAA,GAN5CzB,UAAU;AAiDhB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}